from ftoc2.encode import *
import numpy as np
import unittest

# Derivative code
d_1 = 8
m_1 = 1
l_1 = 256
s_1 = 2
CODEWORD_1 = [
	0x3c, 0xa5, 0xfc, 0xcd, 0x91, 0xe3, 0x49, 0x3b,
	0x36, 0x96, 0x63, 0x78, 0x0e, 0xcb, 0x34, 0x8b,
	0x13, 0xd1, 0xf6, 0xa3, 0xb1, 0x2f, 0x6b, 0x80,
	0x58, 0x56, 0x02, 0xfb, 0xc2, 0x22, 0xa8, 0x6f,
	0x9a, 0x38, 0xab, 0xe3, 0xe7, 0x7d, 0xc6, 0x8e,
	0xd9, 0xdc, 0x46, 0x3a, 0x04, 0xb1, 0x25, 0x88,
	0xd7, 0x32, 0xa1, 0x8c, 0xd8, 0xee, 0x6c, 0xc3,
	0x86, 0xf7, 0x95, 0x6c, 0xcd, 0x91, 0x70, 0x10,
	0xb1, 0xe7, 0x02, 0x6e, 0x9b, 0xf5, 0x15, 0x24,
	0xce, 0x14, 0xf1, 0xef, 0x43, 0xf9, 0xc9, 0xca,
	0x78, 0xc5, 0x33, 0x60, 0x32, 0x36, 0x24, 0x94,
	0x70, 0xf1, 0x72, 0x4e, 0xa1, 0x1d, 0xce, 0x8d,
	0xf0, 0x20, 0xfb, 0x7c, 0xe1, 0x9c, 0x2a, 0x8e,
	0x77, 0x53, 0xaa, 0xad, 0x53, 0xa1, 0x38, 0xd5,
	0xb9, 0xf0, 0xc6, 0x06, 0x88, 0xe1, 0x9e, 0x7c,
	0x9b, 0xdd, 0x08, 0x4c, 0x31, 0x48, 0xae, 0xde,
	0x12, 0x95, 0x71, 0xe1, 0x8f, 0x9f, 0x17, 0x87,
	0x68, 0xaf, 0x17, 0x78, 0x19, 0x46, 0x7a, 0x97,
	0x8b, 0xaa, 0x06, 0xf0, 0x63, 0x98, 0xf4, 0xf0,
	0x5a, 0x13, 0xd0, 0x16, 0x8d, 0xd5, 0xd6, 0xfe,
	0xb4, 0x4a, 0x6c, 0xbd, 0x54, 0x7a, 0x3e, 0xf8,
	0x2d, 0x01, 0x73, 0xef, 0x84, 0x8b, 0x17, 0x1f,
	0x5f, 0xdb, 0xb2, 0x9e, 0x5e, 0x52, 0x33, 0x00,
	0x28, 0xc5, 0xca, 0xdd, 0x14, 0x7c, 0xb6, 0xb4,
	0x16, 0x5e, 0x1c, 0xe3, 0xb8, 0xc1, 0x63, 0xd7,
	0xf6, 0x39, 0xf2, 0xd8, 0xe5, 0x28, 0x93, 0x61,
	0x5a, 0x86, 0xaf, 0x4b, 0xce, 0x82, 0x4e, 0x64,
	0xe1, 0xe2, 0x78, 0x22, 0x17, 0x53, 0x3a, 0x35,
	0xbb, 0x5e, 0xff, 0xbe, 0xa7, 0xc1, 0x34, 0x9b,
	0x15, 0x0a, 0x30, 0x47, 0x68, 0xae, 0x16, 0x73,
	0x21, 0x20, 0x38, 0x99, 0x06, 0x83, 0xd2, 0x74,
	0x1a, 0xfd, 0xb4, 0xe4, 0xf5, 0x39, 0x8a, 0x95,
	0x9e, 0x71, 0x85, 0xa0, 0x67, 0x1a, 0x85, 0xa9,
	0xa5, 0xd5, 0xaa, 0x46, 0x29, 0x6e, 0xbd, 0x2f,
	0x26, 0x85, 0xb3, 0xa1, 0x3a, 0x57, 0x38, 0xad,
	0x04, 0x74, 0xd1, 0x04, 0x4b, 0x97, 0xb5, 0x1f,
	0x20, 0xc9, 0x9b, 0xd1, 0xdb, 0x61, 0x07, 0xfc,
	0x52, 0x68, 0xd1, 0xf0, 0xe6, 0xd6, 0x45, 0x56,
	0x0b, 0xe0, 0x29, 0x36, 0x93, 0x96, 0x2f, 0x09,
	0x2f, 0x98, 0xed, 0x1c, 0xb7, 0xf0, 0xda, 0xd9,
	0xaa, 0x13, 0x8b, 0x35, 0x8f, 0x38, 0x18, 0x31,
	0x81, 0xab, 0xff, 0x0b, 0xcf, 0x04, 0x91, 0xad,
	0x20, 0x49, 0x26, 0xab, 0x37, 0xe0, 0xa2, 0xba,
	0x93, 0xcc, 0xf0, 0xdb, 0x82, 0xe9, 0xd6, 0x44,
	0x21, 0x76, 0x8d, 0xb8, 0xa5, 0x2d, 0x23, 0xfb,
	0xc3, 0x84, 0x93, 0xce, 0x7e, 0x9f, 0x89, 0xf2,
	0xf2, 0x2b, 0xa3, 0x9b, 0x16, 0x22, 0x75, 0xfd,
	0xea, 0xd7, 0xe6, 0xb8, 0x78, 0x4e, 0x68, 0x5f,
	0xb7, 0xb7, 0x26, 0xeb, 0x64, 0x69, 0x7c, 0x5c,
	0x03, 0xd4, 0x8b, 0x95, 0x77, 0xaa, 0x84, 0x4b,
	0x54, 0x9b, 0x82, 0x88, 0x1d, 0xfd, 0xe2, 0x66,
	0xcf, 0x94, 0xa9, 0x88, 0xf5, 0xa0, 0x85, 0x7c,
	0x69, 0x86, 0xc1, 0x99, 0x0e, 0x91, 0x3c, 0x6a,
	0xcc, 0x6f, 0x41, 0xb1, 0x0d, 0xac, 0xc8, 0x0c,
	0xdf, 0x7d, 0x69, 0x9d, 0x2e, 0x1f, 0x94, 0x29,
	0x16, 0x69, 0x17, 0xce, 0x40, 0xb0, 0x70, 0x37,
	0xef, 0x3f, 0x16, 0x72, 0xdb, 0xf6, 0x64, 0xe9,
	0x10, 0x76, 0x4f, 0x36, 0x73, 0x32, 0x7f, 0x4c,
	0x89, 0xfd, 0xe4, 0x73, 0x4e, 0x2a, 0x92, 0x37,
	0x66, 0x8b, 0x8b, 0x30, 0x9e, 0xe3, 0xb7, 0xc6,
	0x9e, 0x81, 0xf7, 0x51, 0xbe, 0xdb, 0x4e, 0x5f,
	0xc5, 0xb7, 0xdc, 0x95, 0xb2, 0x15, 0x6f, 0x8e,
	0xfd, 0xb3, 0xa4, 0x85, 0x72, 0x20, 0xf0, 0x2c,
	0x80, 0xcb, 0x0c, 0x6c, 0x83, 0x31, 0xdb, 0x01
]

# Reed-Muller code
d_2 = 4
m_2 = 2
l_2 = 16
s_2 = 1
CODEWORD_2 = [
	0x09, 0x09, 0x0c, 0x0b, 0x03, 0x0c, 0x07, 0x0d,
	0x02, 0x01, 0x08, 0x0b, 0x02, 0x0e, 0x04, 0x0f,
	0x06, 0x07, 0x08, 0x0c, 0x02, 0x08, 0x01, 0x04,
	0x01, 0x0e, 0x0f, 0x09, 0x04, 0x0b, 0x05, 0x0c,
	0x07, 0x00, 0x09, 0x0a, 0x02, 0x05, 0x03, 0x06,
	0x0e, 0x0e, 0x0e, 0x04, 0x00, 0x01, 0x07, 0x0f,
	0x01, 0x05, 0x0f, 0x0b, 0x00, 0x0f, 0x0a, 0x0b,
	0x0f, 0x0c, 0x08, 0x00, 0x00, 0x06, 0x01, 0x07,
	0x03, 0x0b, 0x0a, 0x03, 0x0f, 0x0b, 0x05, 0x04,
	0x07, 0x05, 0x0c, 0x00, 0x0f, 0x05, 0x07, 0x02,
	0x02, 0x04, 0x0d, 0x06, 0x0e, 0x06, 0x00, 0x06,
	0x0c, 0x0b, 0x01, 0x0d, 0x01, 0x0f, 0x0f, 0x0c,
	0x09, 0x05, 0x04, 0x09, 0x05, 0x04, 0x01, 0x0d,
	0x03, 0x02, 0x03, 0x07, 0x0a, 0x05, 0x0a, 0x09,
	0x05, 0x0f, 0x08, 0x0c, 0x05, 0x06, 0x0a, 0x02,
	0x0b, 0x06, 0x0b, 0x0f, 0x0b, 0x0e, 0x0b, 0x07,
	0x0d, 0x0e, 0x09, 0x07, 0x02, 0x07, 0x06, 0x0b,
	0x0f, 0x07, 0x0c, 0x08, 0x02, 0x04, 0x06, 0x0c,
	0x00, 0x09, 0x0b, 0x0c, 0x00, 0x0a, 0x0c, 0x0f,
	0x08, 0x09, 0x00, 0x04, 0x09, 0x03, 0x07, 0x0a,
	0x01, 0x0b, 0x01, 0x0e, 0x05, 0x0c, 0x05, 0x0d,
	0x03, 0x05, 0x0f, 0x08, 0x0b, 0x02, 0x03, 0x0a,
	0x00, 0x01, 0x0b, 0x0f, 0x09, 0x0b, 0x0f, 0x0a,
	0x0a, 0x0f, 0x09, 0x03, 0x09, 0x0f, 0x07, 0x09,
	0x07, 0x08, 0x02, 0x0f, 0x03, 0x0c, 0x05, 0x06,
	0x02, 0x0f, 0x06, 0x0d, 0x0a, 0x0f, 0x0b, 0x03,
	0x0c, 0x0c, 0x08, 0x0d, 0x09, 0x03, 0x0d, 0x04,
	0x0d, 0x06, 0x0d, 0x07, 0x0a, 0x04, 0x09, 0x05,
	0x09, 0x07, 0x04, 0x04, 0x0d, 0x0a, 0x0a, 0x0c,
	0x00, 0x0c, 0x02, 0x04, 0x08, 0x09, 0x0a, 0x0b,
	0x06, 0x0c, 0x03, 0x06, 0x07, 0x02, 0x0f, 0x08,
	0x0c, 0x0a, 0x0b, 0x06, 0x04, 0x07, 0x0f, 0x0f
]

# Multiplicity code
d_3 = 2
m_3 = 3
l_3 = 8
s_3 = 2
CODEWORD_3 = [
	0x01, 0x00, 0x02, 0x01, 0x01, 0x00, 0x01, 0x00,
	0x01, 0x00, 0x02, 0x01, 0x02, 0x00, 0x03, 0x01,
	0x02, 0x00, 0x03, 0x02, 0x01, 0x01, 0x02, 0x02,
	0x02, 0x02, 0x00, 0x01, 0x01, 0x00, 0x02, 0x03,
	0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x01, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01,
	0x02, 0x01, 0x01, 0x03, 0x00, 0x02, 0x02, 0x00,
	0x02, 0x01, 0x03, 0x00, 0x02, 0x02, 0x02, 0x02,
	0x02, 0x03, 0x01, 0x03, 0x01, 0x01, 0x02, 0x02,
	0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x02, 0x01, 0x00, 0x01, 0x00, 0x02, 0x03,
	0x01, 0x00, 0x01, 0x02, 0x00, 0x01, 0x00, 0x01,
	0x01, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x02, 0x01, 0x00, 0x01, 0x03, 0x03, 0x01,
	0x00, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x03, 0x02, 0x03, 0x01, 0x01, 0x02, 0x02,
	0x00, 0x02, 0x01, 0x02, 0x00, 0x01, 0x03, 0x02,
	0x03, 0x00, 0x02, 0x02, 0x01, 0x01, 0x02, 0x02,
	0x01, 0x01, 0x00, 0x03, 0x01, 0x02, 0x03, 0x00,
	0x00, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x03, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x03, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x01, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x01, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x03, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x02, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x02, 0x03, 0x02, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
]

class TestSysenc(unittest.TestCase):
	r""" Test encoding """

	def test_derivative_code(self):
		r""" Derivative code encoding """
		C = Codeword(d_1, m_1, l_1, s_1)
		for i, _ in C.info_set():
			C[i] = CODEWORD_1[i]
		SystematicallyEncode(C)
		self.assertTrue((C == CODEWORD_1).all())

	def test_reed_muller_code(self):
		r""" Reed-Muller code encoding """
		C = Codeword(d_2, m_2, l_2, s_2)
		for i, _ in C.info_set():
			C[i] = CODEWORD_2[i]
		SystematicallyEncode(C)
		self.assertTrue((C == CODEWORD_2).all())

	def test_multiplicity_code(self):
		r""" Multiplicity code encoding """
		C = Codeword(d_3, m_3, l_3, s_3)
		for i, _ in C.info_set():
			C[i] = CODEWORD_3[i]
		SystematicallyEncode(C)
		self.assertTrue((C == CODEWORD_3).all())


